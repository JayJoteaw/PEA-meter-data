import streamlit as st
st.set_page_config(page_title="PEA Meter Dashboard", layout="wide")
st.write("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡πâ‡∏ß!!")
import pandas as pd
import plotly.graph_objs as go
import datetime
import math

st.write("‚úÖ import‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å string ----------
def extract_numeric_column(series):
    return (
        series.astype(str)
        .str.extract(r"([\d]+\.?\d*)")[0]
        .astype(float)
    )

# ---------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ ----------

st.title("‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏ß‡πÄ‡∏õ‡∏•‡πà‡∏≤
st.markdown("üëÄ ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...")

# ---------- Input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ----------
meter_id = st.text_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå", value="")
selected_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")

# üî∏ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if not meter_id or not selected_date:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô")

# ---------- Mapping ‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü ----------
unit_map = {
    "Voltage": "V",
    "Power": "kW",
    "Current": "A",
    "Frequency": "Hz",
    "Energy": "kWh"
}

available_times = []
file_ready = False

df = pd.DataFrame()
if meter_id and selected_date:
    try:
        # ‚úÖ Debug ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î JSON ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏ä‡∏ß‡πå URL ‡∏à‡∏£‡∏¥‡∏á
        json_url = f"https://raw.githubusercontent.com/JayJoteaw/PEA-meter-data/main/{meter_id}.json"
        st.write(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î: {json_url}")

        df = pd.read_json(json_url)
        st.write("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡πÅ‡∏ñ‡∏ß):")
        st.write(df.head())

        df["Datetime"] = pd.to_datetime(df["DateTime"].astype(str), errors="coerce", dayfirst=True)
        df = df.dropna(subset=["Datetime"])

        allowed_columns = ["Voltage", "Power", "Current", "Frequency", "Energy"]
        graph_options = [col for col in df.columns if col in allowed_columns]
        graph_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π", graph_options)

        df_selected = df[df["Datetime"].dt.date == selected_date]
        if df_selected.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        else:
            available_times = df_selected["Datetime"].dt.strftime("%H:%M").drop_duplicates().sort_values().tolist()
            file_ready = True

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

if file_ready and available_times:
    col1, col2 = st.columns(2)
    with col1:
        start_time_str = st.selectbox("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°", available_times, key="start_time")
    with col2:
        end_time_str = st.selectbox("‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", available_times, index=len(available_times)-1, key="end_time")

    if st.button("‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü"):
        start_dt = pd.to_datetime(f"{selected_date} {start_time_str}")
        end_dt = pd.to_datetime(f"{selected_date} {end_time_str}")

        if start_dt >= end_dt:
            st.error("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")
        else:
            df["TimeOnly"] = df["Datetime"].dt.strftime("%H:%M")
            start_str = start_dt.strftime("%H:%M")
            end_str = end_dt.strftime("%H:%M")

            df_filtered = df[
                (df["Datetime"].dt.date == selected_date) &
                (df["TimeOnly"] >= start_str) &
                (df["TimeOnly"] <= end_str)
            ]

            df_filtered = df_filtered.sort_values("Datetime")

            if df_filtered.empty:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            else:
                y_col = graph_type
                if y_col not in df_filtered.columns:
                    st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{y_col}' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")
                else:
                    try:
                        df_filtered[y_col] = extract_numeric_column(df_filtered[y_col])
                    except:
                        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ")
                        st.stop()

                    if df_filtered[y_col].notna().sum() > 0:
                        y_min = df_filtered[y_col].min()
                        y_max = df_filtered[y_col].max()
                        y_range = y_max - y_min

                        if y_range <= 100:
                            y_min_adj = y_min - 1
                            y_max_adj = y_max + 1
                            y_dtick = 10
                        else:
                            y_min_adj = y_min - 10
                            y_max_adj = y_max + 10
                            y_dtick = max(1, round(y_range / 20))

                        y_mean = df_filtered[y_col].mean()
                        y_peak = df_filtered[y_col].max()
                        y_minval = df_filtered[y_col].min()
                        unit_label = unit_map.get(y_col, "")

                        st.markdown(f"<div style='background-color:#477c85;padding:10px;border-radius:10px;color:white'>‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {y_mean:.2f} {unit_label}</div>", unsafe_allow_html=True)
                        st.markdown(f"<div style='background-color:#855047;padding:10px;border-radius:10px;color:white'>‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {y_peak:.2f} {unit_label}</div>", unsafe_allow_html=True)
                        st.markdown(f"<div style='background-color:#858147;padding:10px;border-radius:10px;color:black'>‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {y_minval:.2f} {unit_label}</div>", unsafe_allow_html=True)

                        fig = go.Figure()
                        fig.add_trace(go.Scatter(
                            x=df_filtered["Datetime"],
                            y=df_filtered[y_col],
                            mode="lines+markers",
                            name=y_col,
                            marker=dict(color="#1f77b4")
                        ))

                        peak_points = df_filtered[df_filtered[y_col] == y_peak]
                        fig.add_trace(go.Scatter(
                            x=peak_points["Datetime"],
                            y=peak_points[y_col],
                            mode="markers",
                            name="Peak",
                            marker=dict(color="red", size=10, symbol="circle-open-dot")
                        ))

                        min_points = df_filtered[df_filtered[y_col] == y_minval]
                        fig.add_trace(go.Scatter(
                            x=min_points["Datetime"],
                            y=min_points[y_col],
                            mode="markers",
                            name="Min",
                            marker=dict(color="yellow", size=10, symbol="circle-open-dot")
                        ))

                        fig.update_xaxes(
                            dtick=3600000,
                            tickformat="%H:%M",
                            tickangle=-45
                        )

                        fig.update_layout(
                            title=f"{y_col} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå {meter_id}",
                            xaxis_title="‡πÄ‡∏ß‡∏•‡∏≤",
                            yaxis_title=f"{y_col} ({unit_label})",
                            yaxis=dict(
                                type="linear",
                                range=[y_min_adj, y_max_adj],
                                dtick=y_dtick,
                                tickformat=".2f"
                            )
                        )

                        st.success(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df_filtered)} ‡πÅ‡∏ñ‡∏ß")
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                        st.stop()
